const mongoose = require('mongoose');

const cardSchema = mongoose.Schema({
  object: String,
  id: String,
  oracle_id: String,
  multiverse_ids: [Number],
  name: String,
  lang: String,
  released_at: Date,
  uri: String,
  scryfall_uri: String,
  layout: String,
  highres_image: Boolean,
  image_uris: {
    small: String,
    normal: String,
    large: String,
    png: String,
    art_crop: String,
    border_crop: String,
  },
  mana_cost: String,
  cmc: Number,
  type_line: String,
  colors: [String],
  color_identity: [String],
  card_faces: [
    {
      object: String,
      name: String,
      printed_name: String,
      mana_cost: String,
      type_line: String,
      printed_type_line: String,
      oracle_text: String,
      printed_text: String,
      artist: String,
      artist_id: String,
      illustration_id: String,
    },
  ],
  legalities: {
    standard: String,
    future: String,
    historic: String,
    pioneer: String,
    modern: String,
    legacy: String,
    pauper: String,
    vintage: String,
    penny: String,
    commander: String,
    brawl: String,
    duel: String,
    oldschool: String,
  },
  games: [String],
  reserved: Boolean,
  foil: Boolean,
  nonfoil: Boolean,
  oversized: Boolean,
  promo: Boolean,
  reprint: Boolean,
  variation: Boolean,
  set: String,
  set_name: String,
  set_type: String,
  set_uri: String,
  set_search_uri: String,
  scryfall_set_uri: String,
  rulings_uri: String,
  prints_search_uri: String,
  collector_number: String,
  digital: Boolean,
  rarity: String,
  card_back_id: String,
  artist: String,
  artist_ids: [String],
  illustration_id: String,
  border_color: String,
  frame: Number,
  full_art: Boolean,
  textless: Boolean,
  booster: Boolean,
  story_spotlight: Boolean,
  edhrec_rank: Number,
  prices: {
    usd: Number,
    usd_foil: Number,
    eur: Number,
    tix: Number,
  },
  related_uris: {
    gatherer: String,
    tcgplayer_decks: String,
    edhrec: String,
    mtgtop8: String,
  },
  purchase_uris: {
    tcgplayer: String,
    cardmarket: String,
    cardhoarder: String,
  },
});

// const cardSchema = mongoose.Schema({
//   object2: String,
//   id2: String,
//   oracle_id2: String,
//   multiverse_ids2: [Number],
//   mtgo_id2: Number,
//   mtgo_foil_id2: Number,
//   tcgplayer_id2: Number,
//   name2: String,
//   lang2: String,
//   released_at2: Date,
//   uri2: String,
//   scryfall_uri2: String,
//   layout2: String,
//   highres_image2: Boolean,
//   image_uris2: {
//     small2: String,
//     normal2: String,
//     large2: String,
//     png2: String,
//     art_crop2: String,
//     border_crop2: String,
//   },
//   mana_cost2: String,
//   cmc2: Number,
//   type_line2: String,
//   oracle_text2: String,
//   colors2: [String],
//   color_identity2: [String],
//   legalities2: {
//     standard2: String,
//     future2: String,
//     historic2: String,
//     pioneer2: String,
//     modern2: String,
//     legacy2: String,
//     pauper2: String,
//     vintage2: String,
//     penny2: String,
//     commander2: String,
//     brawl2: String,
//     duel2: String,
//     oldschool2: String,
//   },
//   games2: [String],
//   reserved2: Boolean,
//   foil2: Boolean,
//   nonfoil2: Boolean,
//   oversized2: Boolean,
//   promo2: Boolean,
//   reprint2: Boolean,
//   variation2: Boolean,
//   set2: String,
//   set_name2: String,
//   set_type2: String,
//   set_uri2: String,
//   set_search_uri2: String,
//   scryfall_set_uri2: String,
//   rulings_uri2: String,
//   prints_search_uri2: String,
//   collector_number2: String,
//   digital2: Boolean,
//   rarity2: String,
//   card_back_id2: String,
//   artist2: String,
//   artist_ids2: [String],
//   illustration_id2: String,
//   border_color2: String,
//   frame2: String,
//   full_art2: Boolean,
//   textless2: Boolean,
//   booster2: Boolean,
//   story_spotlight2: Boolean,
//   edhrec_rank2: Number,
//   prices2: {
//     usd2: String,
//     usd_foil2: String,
//     eur2: String,
//     tix2: String,
//   },
//   related_uris2: {
//     gatherer2: String,
//     tcgplayer_decks2: String,
//     edhrec2: String,
//     mtgtop82: String,
//   },
// });

//   object: String,
//   id: String,
//   oracle_id: String,
//   multiverse_ids: [Number],
//   mtgo_id: Number,
//   mtgo_foil_id: Number,
//   tcgplayer_id: Number,
//   name: String,
//   lang: String,
//   released_at: Date,
//   uri: String,
//   scryfall_uri: String,
//   layout: String,
//   highres_image: Boolean,
//   image_uris: {
//     small: String,
//     normal: String,
//     large: String,
//     png: String,
//     art_crop: String,
//     border_crop: String,
//   },
//   mana_cost: String,
//   cmc: Number,
//   type_line: String,
//   oracle_text: String,
//   colors: [String],
//   color_identity: [String],
//   legalities: {
//     standard: String,
//     future: String,
//     historic: String,
//     pioneer: String,
//     modern: String,
//     legacy: String,
//     pauper: String,
//     vintage: String,
//     penny: String,
//     commander: String,
//     brawl: String,
//     duel: String,
//     oldschool: String,
//   },
//   games: [String],
//   reserved: Boolean,
//   foil: Boolean,
//   nonfoil: Boolean,
//   oversized: Boolean,
//   promo: Boolean,
//   reprint: Boolean,
//   variation: Boolean,
//   set: String,
//   set_name: String,
//   set_type: String,
//   set_uri: String,
//   set_search_uri: String,
//   scryfall_set_uri: String,
//   rulings_uri: String,
//   prints_search_uri: String,
//   collector_number: String,
//   digital: Boolean,
//   rarity: String,
//   card_back_id: String,
//   artist: String,
//   artist_ids: [String],
//   illustration_id: String,
//   border_color: String,
//   frame: String,
//   full_art: Boolean,
//   textless: Boolean,
//   booster: Boolean,
//   story_spotlight: Boolean,
//   edhrec_rank: Number,
//   prices: {
//     usd: String,
//     usd_foil: String,
//     eur: String,
//     tix: String,
//   },
//   related_uris: {
//     gatherer: String,
//     tcgplayer_decks: String,
//     edhrec: String,
//     mtgtop8: String,
//   },

let Card = null;

cardSchema.methods.transform = function () {
  return this.toObject();
};

cardSchema.statics.search = function (filter /* , options */) {
  return Card.find({ name: { $regex: filter.name, $options: 'i' } });
};

Card = mongoose.model('Card', cardSchema);

module.exports = Card;
